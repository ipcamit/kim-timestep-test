#!/usr/bin/env python3
################################################################################
#
#  CDDL HEADER START
#
#  The contents of this file are subject to the terms of the Common Development
#  and Distribution License Version 1.0 (the "License").
#
#  You can obtain a copy of the license at
#  http:# www.opensource.org/licenses/CDDL-1.0.  See the License for the
#  specific language governing permissions and limitations under the License.
#
#  When distributing Covered Code, include this CDDL HEADER in each file and
#  include the License file in a prominent location with the name LICENSE.CDDL.
#  If applicable, add the following below this CDDL HEADER, with the fields
#  enclosed by brackets "[]" replaced with your own identifying information:
#
#  Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
#  CDDL HEADER END
#
#  Copyright (c) 2019, Regents of the University of Minnesota.
#  All rights reserved.
#
#  Contributor(s):
#     Ellad B. Tadmor
#
################################################################################

# The docstring below is vc_description
"""TODO: Add a description of the verification check here."""

# Python 2-3 compatible code issues
from __future__ import print_function

try:
    input = raw_input
except NameError:
    pass

import ase
from ase.calculators.kim import KIM, get_model_supported_species
import kim_python_utils.ase as kim_ase_utils
import kim_python_utils.vc as kim_vc_utils
import random
import numpy as np
import subprocess
import matplotlib.pyplot as plt
import matplotlib.colors

__version__ = "000"
__author__ = "Amit Gupta"

################################################################################
#
#   FUNCTIONS
#
################################################################################

# class members:
# 1. run lammps
# 2. generate lammps conditions
# 3. write lammps script
# 4. read lammps result
# 5. get pass or fail # same as 4?
# 6. compute metric
# 7. get tns
# 8. determine replication
# 9. lammps template

def generate_lammps_file(model:str, 
                        species:str, 
                        mass:float, 
                        lattice_a:float, 
                        time:np.ndarray, 
                        temp:float,
                        temp_file:str,
                        nsteps:int = 1000,
                        repl:int = 6) -> str:
    file_str = f"# LAMMPS input script for testing the Nyquist-Shannon sampling time \n"
    file_str += f"# for the {model} model\n"
    file_str += f"\n\n"
    file_str += f"kim init {model}  metal\n\n"

    # Set the lattice constant
    file_str += f"lattice sc {lattice_a}\n"
    file_str += f"region box block 0 1 0 1 0 1\n"
    file_str += f"create_box 1 box\n"
    file_str += f"create_atoms 1 box\n\n"

    file_str += f"kim interactions {species}\n"
    file_str += f"mass 1 {mass}\n\n"

    file_str += "neighbor 1.0 bin\n"
    file_str += "neigh_modify every 1 delay 0 check no one 1000000 page 10000000\n\n"

    file_str += f"replicate {repl} {repl} {repl}\n\n"

    file_str += f"variable temp equal temp\n"
    file_str += f"fix 2 all ave/time 1 1 1 v_temp ave one file {temp_file}\n"

    file_str += f"velocity all create {temp} 87287 rot yes dist gaussian\n"

    # TODO: Use Langevin thermostat
    file_str += f"fix 1 all nvt temp {temp} {temp} $(1.0*dt)\n\n"
    file_str += f"thermo 1\n"

    for i, t in enumerate(time):
        file_str += f"timestep {t}\n"
        file_str += f"run {nsteps}\n\n"

        file_str += f"print \"<<SUCCESS>> <<{t}>>\"\n" # success

    return file_str

################################################################################

def parse_lammps_result(vc, output, temp, temp_file, time, grade, variance_tol=0.5, nsteps=100):
    temp_arr = np.loadtxt(temp_file, skiprows=2)
    n_successful_simulations = temp_arr.shape[0] // nsteps

    vc.rwrite(f"Number of successful simulations = {n_successful_simulations} for T = {temp}")

    for i in range(n_successful_simulations):
        t = np.mean(temp_arr[i*nsteps: (i+1)*nsteps,1])
        if abs(t-temp) < variance_tol * temp:
            grade[i] = True
        else:
            vc.rwrite(f"Rejecting simulation as temperature variance too high for T = {temp} and time = {time[i]}, mean temp = {t}.")

################################################################################

def plot_grade_vs_temp(vc, grades:np.ndarray, species:str, model:str, temps, times):
    cmap = matplotlib.colors.ListedColormap(['red', 'green'])
    plt.matshow(grades, cmap=cmap)

    plt.xlabel('$t$ (ps)')
    plt.ylabel('T (K)')
    ax = plt.gca()
    ax.set_xticks(np.arange(-.5, grades.shape[1], 1), minor=True)
    ax.set_yticks(np.arange(-.5, grades.shape[0], 1), minor=True)
    ax.grid(which='minor', color='black', linestyle='-', linewidth=2)

    plt.yticks(np.arange(0, len(temps), 1), [f"{t:.0f}" for t in temps])
    plt.xticks(np.arange(0, len(times), 1), [f"{t:.1e}" for t in times],rotation=45)

    name = f"{model}_{species}_grade_vs_temp.png"
    plt.savefig(name)
    plt.close()
    vc.rwrite(f"Saved grade vs temp plot for {species} in {name}")

################################################################################

def get_grade(grade:float):
    """
    Compute the grade for the VC
    """
    if 90 < grade < 100:
        return "A"
    elif 70 < grade < 90:
        return "B"
    elif 50 < grade < 70:
        return "C"
    elif 20 < grade < 50:
        return "D"
    else:
        return "F"

################################################################################
def do_vc(model, vc):
    """
    Execute the VC
    """
    # Parameters
    sampling_temperatures = [10., 100., 1000., 10000.]
    sampling_sim_time = [1.0e-6, 5.0e-5,  
                         1.0e-5, 5.0e-4,  
                         1.0e-4, 5.0e-3, 2.5e-3,  
                         1.0e-3, 5.0e-2, 2.5e-2,
                         1.0e-2]
    variance_tol = 10.0
    nsteps = 10
    # ------------------------------------------------------------------------------

    # Get the model species and lattice constant
    species = get_model_supported_species(model)
    supported_species = kim_ase_utils.remove_species_not_supported_by_ASE(species)
    # remove "user*" species
    supported_species = [s for s in supported_species if not s.startswith("user")]
    radii_dict = dict(map(lambda x:[x[0], [x[1], x[2], x[3]]], np.loadtxt("radii.dat", dtype=[('Element', 'U2'), ('Z', 'i'),('Radius', 'f8'),('mass','f8')])))


    element_wise_grades = []

    for s in supported_species:
        grades = np.zeros((len(sampling_temperatures), len(sampling_sim_time)), dtype=bool) # 6 sampling times
        
        species_radii = radii_dict[s][1]
        species_mass = radii_dict[s][2]
        
        vc.rwrite(f"Generating test lattice for {s}")
        
        for i, temp in enumerate(sampling_temperatures):
            
            vc.rwrite(f"Sampling temperature = {temp}")

            # Generate the lammps lattice
            temp_file = f"{s}_{temp}_temp.dat"
            lammps_file_str = generate_lammps_file(model, s, species_mass, species_radii, sampling_sim_time, temp, temp_file, nsteps=nsteps)
            lammps_file_name = f"{model}_{s}_{int(temp):05d}_in.lammps"
            with open(lammps_file_name, "w") as f:
                f.write(lammps_file_str)
                # Run the lammps file
            result = None
            try:
                result = subprocess.check_output(["lmp", "-in", lammps_file_name],stderr=subprocess.STDOUT)
                vc.rwrite(f"Success for species {s} at temperature {temp}.")
            except subprocess.CalledProcessError as e:
                result = e.output
                vc.rwrite(f"Failure for species {s} at temperature {temp}.")

            # Parse the result
            if result is not None:
                parse_lammps_result(vc, result, temp, temp_file, sampling_sim_time, grades[i], variance_tol=variance_tol)
                subprocess.run(["rm", "log.lammps", temp_file, lammps_file_name]) # So that the next run does not pick up the old files

        # Compute the grade
        score = np.sum(grades.astype(int))
        grade = score / grades.size * 100

        plot_grade_vs_temp(vc, grades, s, model, sampling_temperatures, sampling_sim_time)
                
        element_wise_grades.append(grade)
    
    # Compute the overall grade
    score = np.sum(np.asarray(element_wise_grades))/len(supported_species)
    grade = get_grade(score)

    element_wise_grades = list(map(get_grade, element_wise_grades))

    comment = "Individual grades: " + ", ".join([f"{s} = {g}" for s,g in zip(supported_species, element_wise_grades)])

    #cleanup
    subprocess.run(["rm", "*.lammps"]) # So that the next run does not pick up the old files

    # Write the grade to the VC
    return grade, comment
    

################################################################################
#
#   MAIN PROGRAM
#
###############################################################################
if __name__ == "__main__":

    vcargs = {
        "vc_name": "vc-md-timestep-stability",
        "vc_author": __author__,
        "vc_description": kim_vc_utils.vc_stripall(__doc__),
        "vc_category": "consistency",
        "vc_grade_basis": "graded",
        "vc_files": [],
        "vc_debug": False,  # Set to True to get exception traceback info
    }

    # Get the model extended KIM ID:
    model = input("Model Extended KIM ID = ")

    # Execute VC
    kim_vc_utils.setup_and_run_vc(do_vc, model, **vcargs)
